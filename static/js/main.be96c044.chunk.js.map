{"version":3,"sources":["Console.js","App.js","serviceWorker.js","index.js"],"names":["Console","props","state","character_count","line","text","current_history","current_prompt","visible_history","handleChange","bind","focus","selfRef","React","createRef","promptRef","consoleElem","this","current","clientHeight","lineHeight","parseInt","document","defaultView","getComputedStyle","getPropertyValue","setState","Math","floor","computeVisibleHistory","fetch","then","response","split","e","preventDefault","typeCode","typingRate","characters","length","count","remaining","onAddLOC","getHistoryText","getPromptText","substring","startline","slice","className","onClick","ref","map","i","key","onChange","value","Component","App","achievements","name","description","target","rel","href","threshold","upgrades","effect","cost","nloc","lifetime_nloc","addLOC","loc","upgrade_name","upgrade","find","filter","id","handleUpgrade","achievement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be96c044.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Console.css\";\r\n\r\nclass Console extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      character_count: 0,\r\n      line: 0,\r\n      text: [],\r\n      current_history: [],\r\n      current_prompt: \"\",\r\n      visible_history: 0,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.focus = this.focus.bind(this);\r\n\r\n    this.selfRef = React.createRef();\r\n    this.promptRef = React.createRef();\r\n  }\r\n\r\n  computeVisibleHistory() {\r\n    let consoleElem = this.selfRef.current;\r\n\r\n    let clientHeight = consoleElem.clientHeight;\r\n    let lineHeight = parseInt(\r\n      document.defaultView\r\n        .getComputedStyle(consoleElem, null)\r\n        .getPropertyValue(\"line-height\")\r\n    );\r\n\r\n    this.setState({\r\n      visible_history: Math.floor(clientHeight / lineHeight) - 1,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.computeVisibleHistory();\r\n\r\n    fetch(\"./client.php.txt\")\r\n      .then((response) => response.text())\r\n      .then((text) => {\r\n        this.setState({ text: text.split(/\\r?\\n/) });\r\n      });\r\n  }\r\n\r\n  focus(e) {\r\n    e.preventDefault();\r\n    this.promptRef.current.focus();\r\n\r\n    // we type with the mouse at a faster rate to make clicking and keyboard mashing about equal\r\n    this.typeCode(this.props.typingRate * 5);\r\n  }\r\n\r\n  typeCode(characters) {\r\n    if (this.state.text.length === 0) return;\r\n\r\n    let count = this.state.character_count;\r\n    let line_step = 1;\r\n    let line = this.state.line;\r\n\r\n    if (count + characters >= this.state.text[line].length) {\r\n      let remaining = count + characters - this.state.text[line].length;\r\n      line += line_step;\r\n\r\n      while (\r\n        line < this.state.text.length &&\r\n        remaining >= this.state.text[line].length\r\n      ) {\r\n        remaining -= this.state.text[line].length;\r\n        line += line_step;\r\n      }\r\n\r\n      this.props.onAddLOC(line - this.state.line);\r\n\r\n      if (line >= this.state.text.length) {\r\n        this.setState({\r\n          character_count: remaining,\r\n          line: 0,\r\n          current_history: this.getHistoryText(0),\r\n          current_prompt: this.getPromptText(0, remaining),\r\n        });\r\n      } else {\r\n        this.setState({\r\n          character_count: remaining,\r\n          line: line,\r\n          current_history: this.getHistoryText(line),\r\n          current_prompt: this.getPromptText(line, remaining),\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        character_count: count + characters,\r\n        current_prompt: this.getPromptText(line, count + characters),\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange(e) {\r\n    e.preventDefault();\r\n    this.typeCode(this.props.typingRate);\r\n  }\r\n\r\n  getPromptText(line, count) {\r\n    if (this.state.text.length > 0) {\r\n      let text = this.state.text[line];\r\n\r\n      return text.substring(0, count);\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getHistoryText(line) {\r\n    if (this.state.text.length > 0) {\r\n      let startline =\r\n        line > this.state.visible_history\r\n          ? line - this.state.visible_history\r\n          : 0;\r\n\r\n      return this.state.text.slice(startline, line);\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Console\" onClick={this.focus} ref={this.selfRef}>\r\n        <div className=\"History\">\r\n          {this.state.current_history.map((text, i) => (\r\n            <div key={i}>{text}&nbsp;</div>\r\n          ))}\r\n          <div className=\"Prompt\">\r\n            {this.state.current_prompt}\r\n            <input\r\n              ref={this.promptRef}\r\n              className=\"Cursor\"\r\n              onChange={this.handleChange}\r\n              value=\"\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nConsole.propTypes = {\r\n  onAddLOC: PropTypes.func,\r\n  typingRate: PropTypes.number,\r\n};\r\n\r\nexport default Console;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Console from \"./Console\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      achievements: [\n        {\n          name: \"A Good Days Work\",\n          description: (\n            <>\n              In the 1975 software project management book,{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://en.wikipedia.org/wiki/The_Mythical_Man-Month\"\n              >\n                The Mythical Man Month: Essays on Software Engineering\n              </a>\n              , Fred Brooks states that, no matter the programming language\n              chosen, a professional developer will write an average 10 lines of\n              code (LoC) per day.\n            </>\n          ),\n          threshold: 10,\n        },\n        {\n          name: \"A Better Days Work\",\n          description: (\n            <>\n              In the Codding Horror blog post{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://blog.codinghorror.com/diseconomies-of-scale-and-lines-of-code/\"\n              >\n                Diseconomies of Scale and Lines of Code\n              </a>{\" \"}\n              Jeff Attwood cites a table from Steve McConnell's book that gives\n              an upper bound of 25,000 LoC per year. Attwood goes on to quote\n              McConnell, \"The LOC measure is a terrible way to measure software\n              size, except that all the other ways to measure size are worse.\"\n            </>\n          ),\n          threshold: 100,\n        },\n        {\n          name: \"First code year\",\n          description:\n            \"The average programmer is said to write 10,000 lines of new code in a year. At this rate you'll be a superstar programmer in no time.\",\n          threshold: 10000,\n        },\n        {\n          name: \"One Game Neverending\",\n          description: (\n            <>\n              That's enough code for one{\" \"}\n              <a href=\"https://gnespy.com/museum/\">GNE</a>\n            </>\n          ),\n          threshold: 10000,\n        },\n      ],\n      upgrades: [\n        {\n          name: \"Coding Camp\",\n          description:\n            \"You won't learn much, but at least you'll get some typing practice and a portfolio.\",\n          effect: \"doubles your typing speed\",\n          cost: 200,\n        },\n        {\n          name: \"Discover stackoverflow.com\",\n          description: \"Why write what you can copy.\",\n          effect: \"doubles your typing speed\",\n          cost: 50,\n        },\n      ],\n      typingRate: 1,\n      nloc: 0,\n      lifetime_nloc: 0,\n    };\n\n    this.addLOC = this.addLOC.bind(this);\n  }\n\n  addLOC(loc) {\n    this.setState({ nloc: this.state.nloc + loc, lifetime_nloc: this.state.lifetime_nloc + loc });\n  }\n\n  handleUpgrade(upgrade_name) {\n    const upgrade = this.state.upgrades.find(\n      (upgrade) => upgrade.name === upgrade_name\n    );\n    this.setState({\n      typingRate: this.state.typingRate * 2,\n      nloc: this.state.nloc - upgrade.cost,\n      upgrades: this.state.upgrades.filter(\n        (upgrade) => upgrade.name !== upgrade_name\n      ),\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <div>\n          <pre>\n            &nbsp;&nbsp;&nbsp;____&nbsp;&nbsp;&nbsp;____&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__&nbsp;&nbsp;&nbsp;_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;___&nbsp;&nbsp;_____&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__\n            <br />\n            &nbsp;&nbsp;/&nbsp;&nbsp;_/__/&nbsp;/&nbsp;/__&nbsp;&nbsp;&nbsp;/&nbsp;/&nbsp;&nbsp;(_)__&nbsp;&nbsp;___&nbsp;___&nbsp;&nbsp;&nbsp;___&nbsp;&nbsp;/&nbsp;_/&nbsp;/&nbsp;___/__&nbsp;&nbsp;___/&nbsp;/__\n            <br />\n            &nbsp;_/&nbsp;//&nbsp;_&nbsp;&nbsp;/&nbsp;/&nbsp;-_)&nbsp;/&nbsp;/__/&nbsp;/&nbsp;_&nbsp;\\/&nbsp;-_|_-&lt;&nbsp;&nbsp;/&nbsp;_&nbsp;\\/&nbsp;_/&nbsp;/&nbsp;/__/&nbsp;_&nbsp;\\/&nbsp;_&nbsp;&nbsp;/&nbsp;-_)\n            <br />\n            /___/\\_,_/_/\\__/&nbsp;/____/_/_//_/\\__/___/&nbsp;&nbsp;\\___/_/&nbsp;&nbsp;&nbsp;\\___/\\___/\\_,_/\\__/\n            <br />\n          </pre>\n        </div>\n        <div>\n          <h1>NLoC: {this.state.nloc}</h1>\n        </div>\n        <Console onAddLOC={this.addLOC} typingRate={this.state.typingRate} />\n        <div>\n          <h1>Upgrades</h1>\n          <div className=\"UpgradeList\">\n            {this.state.upgrades\n              .filter((upgrade) => upgrade.cost * 0.8 < this.state.lifetime_nloc)\n              .map((upgrade, i) => (\n                <div className=\"Upgrade\" key={i} onClick={this.handleUpgrade.bind(this, upgrade.name)}>\n                  <h3>\n                    {upgrade.name} (Cost: {upgrade.cost} LoC)\n                  </h3>\n                  <p>{upgrade.description}</p>\n                  <p>\n                    <i>Effect: {upgrade.effect}</i>\n                  </p>\n                </div>\n              ))}\n          </div>\n        </div>\n        <div className=\"Achievements\">\n          <h1>Achievements</h1>\n          <div className=\"AchievementList\">\n            {this.state.achievements\n              .filter((achievement) => achievement.threshold < this.state.lifetime_nloc)\n              .map((achievement, i) => (\n                <div className=\"Achievement\" key={i}>\n                  <h3>{achievement.name}</h3>\n                  <p>\n                    You made {achievement.threshold} lines of code (Loc).{\" \"}\n                    {achievement.description}\n                  </p>\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}